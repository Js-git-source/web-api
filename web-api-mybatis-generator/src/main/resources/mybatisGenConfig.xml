<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!--
       context:生成一组对象的环境
       id:必选，上下文id，用于在生成错误时提示
       defaultModelType:指定生成对象的样式
           1，conditional：类似hierarchical；
           2，flat：所有内容（主键，blob）等全部生成在一个对象中；
           3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
       targetRuntime:
           1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
           2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
       introspectedColumnImpl：类全限定名，用于扩展MBG
   -->
    <context id="clover" targetRuntime="MyBatis3">
        <!-- 自动识别数据库关键字，默认false，
             如果设置为true，根据SqlReservedWords中定义的关键字列表；
             一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
        -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!-- model层 -->
        <plugin type="com.unisguard.webapi.mybatis.plugin.ModelPlugin"/>
        <!-- mapper层 -->
        <plugin type="com.unisguard.webapi.mybatis.plugin.MapperPlugin">
            <property name="rootInterface" value=""/>
            <property name="mapperDir" value="${mybatis.mapper.dir}"/>
            <property name="mapperPackage" value="${mybatis.mapper.package}"/>
        </plugin>
        <!-- mapper xml -->
        <plugin type="com.unisguard.webapi.mybatis.plugin.SqlPlugin"/>
        <!-- manage层 -->
        <plugin type="com.unisguard.webapi.mybatis.plugin.ManagePlugin">
            <property name="rootInterface" value=""/>
            <property name="manageDir" value="${mybatis.manage.dir}"/>
            <property name="managePackage" value="${mybatis.manage.package}"/>
            <property name="manageImplDir" value="${mybatis.manage.impl.dir}"/>
            <property name="manageImplPackage" value="${mybatis.manage.impl.package}"/>
            <property name="mapperPackage" value="${mybatis.mapper.package}"/>
        </plugin>
        <!-- service层 -->
        <plugin type="com.unisguard.webapi.mybatis.plugin.ServicePlugin">
            <property name="rootInterface" value=""/>
            <property name="serviceDir" value="${mybatis.service.dir}"/>
            <property name="servicePackage" value="${mybatis.service.package}"/>
            <property name="serviceImplDir" value="${mybatis.service.impl.dir}"/>
            <property name="serviceImplPackage" value="${mybatis.service.impl.package}"/>
            <property name="managePackage" value="${mybatis.manage.package}"/>
        </plugin>
        <!-- controller层 -->
        <plugin type="com.unisguard.webapi.mybatis.plugin.ControllerPlugin">
            <property name="controllerDir" value="${mybatis.controller.dir}"/>
            <property name="controllerPackage" value="${mybatis.controller.package}"/>
            <property name="servicePackage" value="${mybatis.service.package}"/>
        </plugin>
        <!-- 数据库连接 -->
        <jdbcConnection driverClass="${jdbc.driverClassName}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
            <!--获取数据库注释-->
            <property name="remarksReporting" value="true"/>
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>
        <!-- java类型处理器,用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型 -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <property name="forceBigDecimals" value="false"/>
            <property name="useJSR310Types" value="true"/>
        </javaTypeResolver>
        <!-- java模型创建器，是必须要的元素
             负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
             targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
             targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
        -->
        <javaModelGenerator targetPackage="${mybatis.model.package}"
                            targetProject="${mybatis.model.dir}">
            <property name="enableSubPackages" value="true"/>
            <!-- 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter -->
            <property name="constructorBased" value="false"/>
            <!-- 是否创建一个不可变的类，如果为true，MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 -->
            <property name="immutable" value="false"/>
            <!-- 在setter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
            <property name="rootClass" value="com.unisguard.webapi.common.dataobject.base.BaseDO"/>
        </javaModelGenerator>

        <sqlMapGenerator targetPackage="${mybatis.sql.package}"
                         targetProject="${mybatis.sql.dir}">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <javaClientGenerator targetPackage="${mybatis.mapper.package}" type="XMLMAPPER"
                             targetProject="${mybatis.mapper.dir}">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!--
            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            可选：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
            property:
            ignoreQualifiersAtRuntime: 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema;
            modelOnly：指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素
            useActualColumnNames：如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法
            columnRenamingRule：该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
                比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
                那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
                custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；
                注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
                如果使用了columnOverride元素，该属性无效；
            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
         -->
        <table tableName="t_deploy" domainObjectName="DeployDO" mapperName="DeployMapper"/>
    </context>
</generatorConfiguration>
